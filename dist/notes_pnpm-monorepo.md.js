import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const __pageData = JSON.parse('{"title":"pnpm-monorepo","description":"","frontmatter":{"title":"pnpm-monorepo"},"headers":[],"relativePath":"notes/pnpm-monorepo.md","filePath":"notes/pnpm-monorepo.md","lastUpdated":1689167996000}');
const _sfc_main = { name: "notes/pnpm-monorepo.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="⏳-使用-pnpm-管理-monorepo" tabindex="-1">⏳ 使用 pnpm 管理 Monorepo <a class="header-anchor" href="#⏳-使用-pnpm-管理-monorepo" aria-label="Permalink to &quot;⏳ 使用 pnpm 管理 Monorepo&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">🌅 介绍</p><p>Pnpm 是一个快速、零配置的 JavaScript 项目管理工具，它使用了一种独特的方式来存储依赖，以此来减少磁盘空间和提高安装速度。内置对 Monorepo 的支持，可以很好的解决 Monorepo 项目中的 “幽灵依赖” 问题。</p><p>Monorepo 是一种管理项目的方式，它可以将多个项目放在一个仓库中，这样可以更好的复用代码、依赖、工程配置等，提高开发、协作效率，同时也可以减少维护成本。</p></div><h2 id="📦-安装-pnpm" tabindex="-1">📦 安装 pnpm <a class="header-anchor" href="#📦-安装-pnpm" aria-label="Permalink to &quot;📦 安装 pnpm&quot;">​</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#676E95", "font-style": "italic" })}"># 使用 npm 安装 pnpm</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">npm</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">install</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">-g</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">pnpm</span></span></code></pre></div><h2 id="🛠-初始化-monorepo" tabindex="-1">🛠 初始化 Monorepo <a class="header-anchor" href="#🛠-初始化-monorepo" aria-label="Permalink to &quot;🛠 初始化 Monorepo&quot;">​</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#676E95", "font-style": "italic" })}"># 初始化 Monorepo</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">pnpm</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">init</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#676E95", "font-style": "italic" })}"># 创建 pnpm-workspace.yaml</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">touch</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">pnpm-workspace.yaml</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#676E95", "font-style": "italic" })}"># 创建 packages 目录</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">mkdir</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">packages</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#676E95", "font-style": "italic" })}"># 创建子项目</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#82AAFF" })}">cd</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">packages</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">npx</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">vite</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">create</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">project-nam</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">e</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&gt;</span></span></code></pre></div><h2 id="🔗-添加配置" tabindex="-1">🔗 添加配置 <a class="header-anchor" href="#🔗-添加配置" aria-label="Permalink to &quot;🔗 添加配置&quot;">​</a></h2><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#676E95", "font-style": "italic" })}"># pnpm-workspace.yaml</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F07178" })}">packages</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">  </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">-</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&#39;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">packages/*</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&#39;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">🛟 what does it mean?</p><p><code>pnpm-workspace.yaml</code> 是 pnpm 的配置文件，它用于配置 Monorepo 的工作空间，这里配置 <code>packages/*</code>，表示 <code>packages</code> 目录下的所有子目录都是一个子项目。</p></div><p><strong>创建 npmrc 文件，配置 pnpm 作为包管理器</strong></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#676E95", "font-style": "italic" })}"># 创建 npmrc 文件</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">touch</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">.npmrc</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#676E95", "font-style": "italic" })}"># 使用 pnpm 作为包管理器</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">package-manager</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">=</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">pnpm</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">hoist-pattern[]</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">=ts-node</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">engine-strict</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">=</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">true</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">progress</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">=</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">true</span></span></code></pre></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#676E95", "font-style": "italic" })}">// package.json</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">  </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C792EA" })}">scripts</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">:</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">{</span></span>
<span class="line highlighted error"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">    </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">preinstall</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">:</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">node -e </span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">\\&quot;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">if (!p<wbr>rocess.env.npm_config_user_agent.includes(&#39;pnpm&#39;)) throw new Error(&#39;You must use pnpm to install dependencies&#39;)</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">\\&quot;</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">  </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">},</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">  </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C792EA" })}">engines</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">:</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">    </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">node</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">:</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">^14.18.0 ||&gt;=16.18.0</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">    </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">pnpm</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">:</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">&gt;=7.26.3</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">  </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">},</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">  </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C792EA" })}">packageManager</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">:</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">pnpm@7.26.3</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">}</span></span></code></pre></div><h2 id="📦-安装依赖" tabindex="-1">📦 安装依赖 <a class="header-anchor" href="#📦-安装依赖" aria-label="Permalink to &quot;📦 安装依赖&quot;">​</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#676E95", "font-style": "italic" })}"># 安装依赖, 在根目录执行</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">pnpm</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">install</span></span></code></pre></div><p>此时，会在根目录生成一个 <code>pnpm-lock.yaml</code> 文件，它用于记录所有子项目的依赖信息。</p><h2 id="🚀-开发" tabindex="-1">🚀 开发 <a class="header-anchor" href="#🚀-开发" aria-label="Permalink to &quot;🚀 开发&quot;">​</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#676E95", "font-style": "italic" })}"># 进入子项目</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#82AAFF" })}">cd</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">packages/</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">project-nam</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">e</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#676E95", "font-style": "italic" })}"># 启动开发服务器</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">pnpm</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">dev</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">🌻 如何在根目录执行 <code>pnpm dev</code>？</p><p>在根目录的 <code>package.json</code> 中添加如下配置： <code>--filter -F</code> 参数用于指定执行的子项目，<code>&lt;project-name&gt;</code> 为子项目名称。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">  </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C792EA" })}">scripts</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">:</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">    </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">dev</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">:</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">pnpm run dev --filter packages/&lt;project-name&gt;</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">  </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">}</span></span></code></pre></div><p>或者</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">  </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C792EA" })}">scripts</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">:</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">{</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">    </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">dev</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">:</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">pnpm run dev -F packages/&lt;project-name&gt;</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">  </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">}</span></span></code></pre></div></div><h2 id="🍯-pnpm-命令" tabindex="-1">🍯 pnpm 命令 <a class="header-anchor" href="#🍯-pnpm-命令" aria-label="Permalink to &quot;🍯 pnpm 命令&quot;">​</a></h2><ul><li><code>pnpm install</code> 安装依赖</li><li><code>-r</code> 递归执行命令，比如 <code>pnpm -r run build</code> 会递归执行<strong>所有子项目</strong>的 <code>build</code> 命令</li><li><code>--filter</code> 指定执行的子项目，比如 <code>pnpm run build --filter packages/&lt;project-name&gt;</code> 会执行指定子项目的 <code>build</code> 命令 需要注意的是执行的顺序会安装依赖的相互依赖关系来决定，而不是根据文件夹的顺序来决定。这样在构建一个产物时，可以先构建依赖的子项目，再构建依赖的子项目，以此类推。</li><li><code>pnpm run watch -r</code> 监听所有子项目的文件变化，自动执行 <code>build</code> 命，or <code>pnpm run watch --filter packages/&lt;project-name&gt;</code> 监听指定子项目的文件变化，自动执行 <code>build</code> 命令，增加<code>--parallel</code> 参数可以并行执行</li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("notes/pnpm-monorepo.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const pnpmMonorepo = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  pnpmMonorepo as default
};
