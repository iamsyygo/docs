import{_ as s,c as a,o as n,V as l}from"./chunks/framework.40a7f398.js";const C=JSON.parse('{"title":"🏟️ vue3 略知一二","description":"","frontmatter":{},"headers":[],"relativePath":"notes/vue3-略知一二.md","filePath":"notes/vue3-略知一二.md","lastUpdated":1692887517000}'),p={name:"notes/vue3-略知一二.md"},o=l(`<h1 id="🏟️-vue3-略知一二" tabindex="-1">🏟️ vue3 略知一二 <a class="header-anchor" href="#🏟️-vue3-略知一二" aria-label="Permalink to &quot;🏟️ vue3 略知一二&quot;">​</a></h1><h2 id="📒-slot" tabindex="-1">📒 Slot <a class="header-anchor" href="#📒-slot" aria-label="Permalink to &quot;📒 Slot&quot;">​</a></h2><ul><li>prop 设计思想是传递<strong>状态数据</strong></li><li>slot 设计思想是传递<strong>DOM 节点</strong></li><li>子组件虽为调用者预留 slot，但是 <strong>slot 的作用域依然属于父组件，所以可以访问到父组件内的所有状态</strong></li><li>插槽内容可以访问到父组件的数据作用域，因为插槽内容本身是在父组件模板中定义的</li></ul><blockquote><p>vue 3.3 新的 <code>defineSlots</code> 宏可用于声明预期的插槽及其各自的预期插槽道具，更好的类型推断</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">defineSlots</span><span style="color:#89DDFF;">&lt;{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">footer</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{})</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span></span>
<span class="line"><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><p><code>defineSlots</code>只接收一个泛型参数(类型参数)，不接受运行时参数</p></blockquote><h2 id="👣-ref-获取-dom" tabindex="-1">👣 Ref 获取 DOM <a class="header-anchor" href="#👣-ref-获取-dom" aria-label="Permalink to &quot;👣 Ref 获取 DOM&quot;">​</a></h2><p><strong>获取多个 Ref DOM 可以插入一个数组，或者是一个函数(回调函数，每次调用传入 DOM 为参数)</strong></p><blockquote><ul><li><p>数组：当在 v-for 中使用模板引用时，对应的 ref 中包含的值是一个数组，它将在元素被挂载后包含对应整个列表的所有元素</p></li><li><p>函数：ref 传入一个函数，每次调用传入 DOM 为参数</p><p>在每次组件更新时都被调用，当绑定的元素被卸载时，函数也会被调用一次，此时的 el 参数是 null</p></li></ul></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 获取多个 DOM - 数组</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> itemRefs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">([])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取多个 DOM - 函数</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> itemRefs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">el</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">el</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">;&lt;</span><span style="color:#A6ACCD;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">item in list</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">itemRefs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> item </span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><strong>组件的类型声明：</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// typeof 表示获取组件的类型</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// InstanceType 表示获取组件的实例类型</span></span>
<span class="line"><span style="color:#82AAFF;">ref</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">InstanceType</span><span style="color:#89DDFF;">&lt;typeof</span><span style="color:#A6ACCD;"> 组件</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="📘-对象引用与-vue3-响应式" tabindex="-1">📘 对象引用与 VUE3 响应式 <a class="header-anchor" href="#📘-对象引用与-vue3-响应式" aria-label="Permalink to &quot;📘 对象引用与 VUE3 响应式&quot;">​</a></h2><p><strong>为一个数据创建响应式时，若原数据为复杂类型数据，此时并不是对原始数据的拷贝，而是引用，改变响应式的数据后，原始数据也会被修改</strong></p><p>不推荐使用 reactive() 的泛型参数，因为在处理深层次的 reactive 时，对于字段是 ref 类型数据时解包的返回值与泛型参数的类型不同</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> reactive </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> number </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p><strong>setup 语法糖中可直接使用 await ，不需要定义 async，setup 会自动变成 async setup</strong></p><h2 id="🌏-watch-细节" tabindex="-1">🌏 Watch 细节 <a class="header-anchor" href="#🌏-watch-细节" aria-label="Permalink to &quot;🌏 Watch 细节&quot;">​</a></h2><p><strong>可以是一个 getter 函数</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">newValue</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// x + y = newValue</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span></code></pre></div><blockquote><p>🔥 <strong>不可以直接的监听一个 reactive 响应式对象上的字段</strong></p><p><strong>响应式对象通常是通过依赖追踪来实现，直接监听一个响应式对象的字段并不是一个常见的做法，因为它破坏了框架所建立的依赖追踪机制，可以传入一个 getter 函数来让 watch 监听这个函数</strong></p><p><strong>如果传入的是整个 reactive 响应式对象，默认则是 deep 深层(🌻)的隐式地监听，需要注意的是它的 newVal 和 oldVal 值都是相等的，因为它是一个引用类型的数据</strong></p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// error</span></span>
<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">value is: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// yes - getter 函数</span></span>
<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">value is: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 整个 reactive 响应式对象，默认 deep 深层(🌻)的隐式地监听</span></span>
<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">newValue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">oldValue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">newValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newValue</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">oldValue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldValue</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><blockquote><p><strong>🛟 总结：</strong></p><p><code>watch</code>监听的来源可以是以下几种：</p><ul><li>一个 ref，它是一个浅层的监听(ref 本身是用于包装基本类型的，所以不会进行深层的监听)</li><li>一个 reactive 响应式对象，默认是 deep 深层的隐式地监听，需要注意的是它的 newVal 和 oldVal 值都是相等的，因为它是一个引用类型的数据</li><li>一个 getter 函数，它是一个浅层的监听，只在此函数的返回值变化时才会触发回调</li><li>一个数组，数组中的每一项都是一个监听源，它是一个浅层的监听，只在数组中的每一项变化时才会触发回调</li></ul><p>值得注意的是，当 ref 的值是一个对象时，那么它的 .value 属性就是一个 reactive 响应式对象，所以当监听这样一个 ref 时，由于 ref 是一个浅层的监听，所以只有当 ref 的 .value 属性变化时才会触发回调，而不是当 ref 的 .value 属性中的某个字段变化时才会触发回调。可以使用 getter 函数来解决这个问题</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 只有当 state.value 地址变化时才会触发回调</span></span>
<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// or</span></span>
<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 当 state.value 中的某个字段变化时触发回调</span></span>
<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// or,有点类似于一个 getter 函数 和 多个监听源数组的结合</span></span>
<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span></code></pre></div></blockquote><h2 id="🍯-watcheffect-细节" tabindex="-1">🍯 watchEffect 细节 <a class="header-anchor" href="#🍯-watcheffect-细节" aria-label="Permalink to &quot;🍯 watchEffect 细节&quot;">​</a></h2><p><strong>watchEffect 会在副作用发生期间追踪依赖。它会在同步执行过程中，自动追踪所有能访问到的响应式属性。</strong>(记住同步执行)</p><p>**需要注意的是，watchEffect 的副作用函数是在同步执行过程中运行收集依赖的，意味着如果在副作用函数内部进行异步操作时，Vue 无法自动追踪异步操作的依赖关系。在处理异步操作时，应该使用 watch 或 computed 等异步侦听函数来处理。**这与<code>watch</code>不同，<code>watch</code>选项默认情况下是异步执行的。</p><p><strong>简述：当 watchEffect 中存在异步操作，则在异步之后的响应式数据 Vue 都无法追踪进行更新</strong></p><ul><li><strong>需要注意的是默认 watchEffect 是在 DOM 更新前、挂载前执行的，所以内部访问 DOM Ref 时可能不存在</strong>🌻</li><li><strong>需要指明 flush: &#39;post&#39; 选项，能访问被 Vue 更新之后的 DOM</strong></li><li><strong>或者使用</strong> <code>watchPostEffect</code> <strong>API</strong></li></ul><blockquote><p><strong>🥽 异步操作创建的监听器</strong></p><p><strong>在 setup() 或 <code>&lt;script setup&gt;</code> 中同步语句创建的侦听器，会自动绑定到宿主组件实例上，并且会在宿主组件卸载时自动停止。因此，在大多数情况下，无需关心怎么停止一个侦听器。</strong></p><p>**但是，用异步回调创建一个侦听器，它不会绑定到当前组件上，必须手动停止它，以防内存泄漏。(包括 watch 与 watchPostEffect)**这是在自定义 hooks 中需要特别注意的细节</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> unwatch </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#82AAFF;">getList</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 异步中创建 watchEffect、watch 需要手动清除</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">unwatch</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">watch</span><span style="color:#F07178;">() </span><span style="color:#A6ACCD;">or</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">watchEffect</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 组件卸载去除</span></span>
<span class="line"><span style="color:#82AAFF;">unwatch</span><span style="color:#A6ACCD;">()</span></span></code></pre></div></blockquote><h2 id="🏖️-监听子组件生命周期" tabindex="-1">🏖️ 监听子组件生命周期 <a class="header-anchor" href="#🏖️-监听子组件生命周期" aria-label="Permalink to &quot;🏖️ 监听子组件生命周期&quot;">​</a></h2><p>通过 <code>@vnode-updated</code> or <code>@vnodeUpdated</code> 监听</p><blockquote><p>与 vue2 不同，在 2 版本中，监听子组件生命周期需要通过 <code>@hook:updated</code> 监听</p></blockquote><h2 id="🤿-provide-inject-标注类型" tabindex="-1">🤿 provide | inject 标注类型 <a class="header-anchor" href="#🤿-provide-inject-标注类型" aria-label="Permalink to &quot;🤿 provide | inject 标注类型&quot;">​</a></h2><p><strong>通常依赖注入在多个组件中进行使用，为它标注正确的类型非常重要，vue 为此提供一个接口类型根据</strong> <code>InjectionKey</code><strong>，与</strong> <code>Symbol</code><strong>配合使用</strong></p><p>🏡 同时的也应该为 inject 提供泛型标注，<strong>推荐的做法是将这些泛型的类型编写在同一个文件中，以供其他组件导入使用</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">provide</span><span style="color:#A6ACCD;">(key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 一般使用</span></span>
<span class="line"><span style="color:#82AAFF;">provide</span><span style="color:#A6ACCD;">(options</span><span style="color:#89DDFF;">,{</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ts</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> options </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InjectionKey</span><span style="color:#89DDFF;">&lt;{</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果 value 位置传入错误类型就会报错提示</span></span>
<span class="line"><span style="color:#82AAFF;">provide</span><span style="color:#A6ACCD;">(options</span><span style="color:#89DDFF;">,{</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inject</span><span style="color:#A6ACCD;">(key)</span></span></code></pre></div><blockquote><p><strong>🔥 响应性链接</strong></p><p><strong>如果提供的值是一个 ref 对象，注入进来的也会是该 ref 对象，而不会自动解包为其内部的值。这使得注入方组件能够通过 ref 对象保持了和供给方的响应性链接</strong> 这是与 vue2 不同的地方，vue2 中如果直接注入一个 defineProperty 的对象，他们之间是没有响应式链接的。但是可以将响应式进行一层包装，然后注入，这样就可以保持响应式链接，或者在 v2.7 以上版本中使用 <code>computed</code> 进行包装注入</p></blockquote><blockquote><p><strong>在一些场景中，默认值可能需要通过调用一个函数或初始化一个类来取得。为了避免在用不到默认值的情况下进行不必要的计算或产生副作用，可以使用工厂函数来创建默认值（与 props 类似）</strong></p></blockquote><p><strong>如果不希望数据被子组件修改，仅用于展示，可以使用</strong> <a href="https://staging-cn.vuejs.org/api/reactivity-core.html#readonly" target="_blank" rel="noreferrer"><strong>readonly</strong></a> <strong>进行标注</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">inject</span><span style="color:#A6ACCD;">(key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> defaultValue)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 类型：{x:number} | 可能是 undefined 🕶</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> inject </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> T </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">options</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 添加默认值</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inject</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">options</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><blockquote><p><strong>修改值</strong></p><p><strong>当提供修改注入响应式的数据的方法时，建议尽可能将任何对响应式状态的变更的方法都保持在供给方组件中。这样可以确保所提供状态的声明和变更操作都内聚在同一个组件内，使其更容易维护。(配套提供一个修改状态数据的函数，给子组件调用更新数据)</strong></p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> location </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">North Pole</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">updateLocation</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">location</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">South Pole</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">provide</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">location</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  location</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  updateLocation</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>🥥 组合函数</p><p>如果组合式函数在有<strong>接收 ref 为参数时</strong>会产生响应式 effect，<strong>请确保使用 watch() 显式地监听此 ref，或者在 watchEffect() 中调用 unref() 来进行正确的追踪。</strong></p><p><strong>在组合式函数中使用 ref() 而不是 reactive()。<strong>推荐的约定是组合式函数</strong>始终返回一个包含多个 ref 的普通的非响应式对象(使用普通对象进行包裹一层)</strong>，这样该对象在组件中被解构为 ref 之后仍可以保持响应性</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// x 和 y 是两个 ref</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useMouse</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><p>需要注意的是，在组合函数中，<strong>需要在 onUnmounted() 时手动清理副作用</strong>。举例来说，如果一个组合式函数设置一个事件监听器<code>watchEffect</code>，它就应该在 onUnmounted() 中被移除。也可以使用一个组合式函数来自动做这些事(手动清理副作用)。</p><p><strong>组合式函数在 <code>&lt;script setup&gt;</code> 或 setup() 钩子中，应始终被同步地调用。</strong></p><p><strong>注意：这个限制是为让 Vue 能够确定当前正在被执行的到底是哪个组件实例，只有能确认当前组件实例，才能够：</strong></p><ul><li><strong>将生命周期钩子注册到该组件实例上</strong></li><li><strong>将计算属性和监听器注册到该组件实例上，以便在该组件被卸载时停止监听，避免内存泄漏。</strong></li></ul><blockquote><p>🔥 <strong>需要注意的是 <code>&lt;script setup&gt;</code> 是唯一在调用 await 之后仍可调用组合式函数的地方。编译器会在异步操作之后自动为你恢复当前的组件实例。</strong></p></blockquote><h2 id="🛵-ref" tabindex="-1">🛵 ref <a class="header-anchor" href="#🛵-ref" aria-label="Permalink to &quot;🛵 ref&quot;">​</a></h2><blockquote><p>使用 ref 时，会返回一个可变的响应式对象，该对象作为一个<strong>响应式的引用</strong>维护着它【内部的值】，这也就是 ref 名称的来源；它内部的值是在 ref 的 value 属性中被维护的，真正的数据是在 value 中维护，所以在使用时才需要使用 <code>ref.value</code> 进行访问。所以在使用双向绑定时，使用 ref 与 reactive 的区别就是，ref 是修改的 value 属性，而 reactive 是修改的对象本身的引用的值，从而 reactive 被直接修改引用丢失响应式，而 ref 修改的是 value 属性，所以不会丢失响应式</p></blockquote><blockquote><p>🌻 解包问题 在模板中当直接传入一个 ref 时，会自动解包，但是如果传入的是一个通过一层对象包装的 ref，就不会自动解包，需要手动解包 需要注意的是如果是一个 reactive 对象包裹的 ref，也会自动解包 值得注意的是，当访问到某个响应式数组或 Map 这样的原生集合类型中的 ref 元素时，不会执行 ref 的解包</p></blockquote><blockquote><p>ref 传递一个值之后，如果使用的是基本类型响应式依赖 <code>Object.defineProperty()</code> 的 <code>get()</code> 和 <code>set()</code> ，如果 ref 使用的是引用类型，ref 函数底层会自动将 ref 转换成 reactive;</p></blockquote><h2 id="🎢-defineexpose" tabindex="-1">🎢 defineExpose <a class="header-anchor" href="#🎢-defineexpose" aria-label="Permalink to &quot;🎢 defineExpose&quot;">​</a></h2><h2 id="🌽-关于解构" tabindex="-1">🌽 关于解构 <a class="header-anchor" href="#🌽-关于解构" aria-label="Permalink to &quot;🌽 关于解构&quot;">​</a></h2><h2 id="🌴-option-api-的缺陷" tabindex="-1">🌴 Option Api 的缺陷 <a class="header-anchor" href="#🌴-option-api-的缺陷" aria-label="Permalink to &quot;🌴 Option Api 的缺陷&quot;">​</a></h2><p>如果你正在重构一个 vue2 options Api 项目你会发现，处理相同逻辑关注点的代码被强制拆分在了不同的选项中，位于文件的不同部分，一个状态到处被使用，到处被修改。在一个几百行的大组件中，要读懂代码中的一个逻辑关注点，需要在文件中反复上下滚动，这并不理想。 另外，如果想要将一个逻辑关注点抽取重构到一个可复用的工具函数中，需要从文件的多个不同部分找到所需的正确片段。</p><h2 id="🛟-关于响应式" tabindex="-1">🛟 关于响应式 <a class="header-anchor" href="#🛟-关于响应式" aria-label="Permalink to &quot;🛟 关于响应式&quot;">​</a></h2><blockquote><p>🌈 何为响应式：</p><p>响应式描述的是 <strong>函数 与 数据</strong> 的关联 当数据发生变化时，函数会自动执行，一个数据的变化不会到另一个数据的变化，而是到函数的变化 vue 中的模板是一个 render 函数，当数据发生变化时，render 函数会自动执行，从而实现视图的更新。</p><p>🚁 以下是 vue 中的响应式函数，它们都会被监控起来，当依赖的数据发生变化时，它们会自动执行</p><ul><li>render 函数：当依赖的数据发生变化时，render 函数会自动执行</li><li>计算属性：当依赖的数据发生变化时，计算属性会自动执行</li><li>watch：当依赖的数据发生变化时，watch 会自动执行</li><li>watchEffect：当依赖的数据发生变化时，watchEffect 会自动执行 需要注意的是这些函数是被监控的函数才会被自动执行，在 vue2 中它们是被 watcher 监控，而在 vue3 中它们是被 effect(reactivity effect)监控的，两者都是 vue 中的响应式系统的核心，内部的函数。 响应式数据是一个对象</li></ul></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 不会被监控，这是一个数据与数据的关联，ref 函数不会被监控</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ref 本身不会自动追踪依赖，它只是一个包装器，它的作用是将基本类型数据包装成一个响应式对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">initialState)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">update</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">initialState</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">initialState</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">watchEffect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 不会被监控，原始类型数据不会被监控</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">initialState</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 传入的是一个原始类型数据 initialState</span></span>
<span class="line"><span style="color:#82AAFF;">update</span><span style="color:#A6ACCD;">(props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">initialState)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 解决</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">update</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">initialState</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">watchEffect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// props 是一个响应式对象，当 props.initialState 发生变化时，会自动执行</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">initialState</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">update</span><span style="color:#A6ACCD;">(props)</span></span></code></pre></div><blockquote><p>🪣 所以在使用 props 时尽可能的使用 props 本身，而不是 props 的某个字段，因为 props 是一个响应式对象，当 props 发生变化时，会自动执行，而 props 的某个字段不是一个响应式对象，可能是一个原始类型数据，原始类型响应式会丢失</p></blockquote><blockquote><p>⛵️ 静态提升</p><p>vue3 中的静恋提升（Static Markup) 是一种编译优化技术，它通过在编译阶段分析模板，将静态的部分提升为静态标记，从而减少运行时的开销。</p><p>静态提升通过在编译过程中将模板中的静态内容标记为常量，并将其提升到组件的创建阶段。这意味着在每次组件实例化时，这些静态内容都不需要重新计算，从而提高了渲染的性能。</p><ul><li><p>编译时性能优化：静态提升可以减少运行时的模板解析和生成代码的时间，因为编译器能够在编译阶段检测到静态内容，并生成更高效的代码。</p></li><li><p>运行时性能优化：由于静态内容被提升为常量，它们不需要在每次渲染时重新计算，从而减少了不必要的计算开销，提高了组件的渲染性能。</p></li></ul></blockquote><h2 id="🎁-ref-or-reactive" tabindex="-1">🎁 Ref or Reactive <a class="header-anchor" href="#🎁-ref-or-reactive" aria-label="Permalink to &quot;🎁 Ref or Reactive&quot;">​</a></h2><ul><li>computed 返回的是一个 ref，所以在模板中使用时，不需要手动解包</li><li>props 返回的是一个 reactive</li><li>ref 传入一个复杂类型数据时，会自动转换成 reactive，<code>.value</code> 属性是一个 reactive，外层是一个 ref</li></ul><p><strong>响应式的数据一定是一个对象</strong></p><h2 id="⛺️-小习惯" tabindex="-1">⛺️ 小习惯 <a class="header-anchor" href="#⛺️-小习惯" aria-label="Permalink to &quot;⛺️ 小习惯&quot;">​</a></h2><blockquote><p>当调用函数时，仅仅需要获取函数的第二个参数的使用，不需要第一个参数时，通常使用 <code>_</code>进行占位</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">setup</span><span style="color:#A6ACCD;">(_</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> context)</span></span></code></pre></div></blockquote><blockquote><p>同样的在 ts 中，不需要某些参数时，通常使用 <code>_</code>前缀补充防止报错</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">handle</span><span style="color:#A6ACCD;">(_</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data)</span></span></code></pre></div></blockquote>`,68),e=[o];function t(c,r,y,D,F,A){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{C as __pageData,u as default};
