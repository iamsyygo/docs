import{_ as a,c as s,o,V as n}from"./chunks/framework.40a7f398.js";const A=JSON.parse('{"title":"🤿 进制 进击","description":"","frontmatter":{},"headers":[],"relativePath":"notes/计算机进制.md","filePath":"notes/计算机进制.md","lastUpdated":1693035930000}'),l={name:"notes/计算机进制.md"},t=n(`<h1 id="🤿-进制-进击" tabindex="-1">🤿 进制 进击 <a class="header-anchor" href="#🤿-进制-进击" aria-label="Permalink to &quot;🤿 进制 进击&quot;">​</a></h1><blockquote><p>计算机使用不同的进制来表示数据，常见的进制有二进制（Binary）、八进制（Octal）、十进制（Decimal）和十六进制（Hexadecimal）。这些进制在计算机科学和编程中经常被使用。</p></blockquote><h3 id="🪣-二进制-binary" tabindex="-1">🪣 二进制（Binary） <a class="header-anchor" href="#🪣-二进制-binary" aria-label="Permalink to &quot;🪣 二进制（Binary）&quot;">​</a></h3><p>二进制是计算机中最基本的进制，**使用只有 0 和 1 的数字表示数据。**在二进制中，每一位数字代表一个权值，每位权值都是 <strong>2 的幂</strong>。例如，二进制数 1010 表示<code> 1x2^3 + 0x2^2 + 1x2^1 + 0x2^0</code>，即十进制的 10。</p><h3 id="🪂-八进制-octal" tabindex="-1">🪂 八进制（Octal） <a class="header-anchor" href="#🪂-八进制-octal" aria-label="Permalink to &quot;🪂 八进制（Octal）&quot;">​</a></h3><p>八进制使用 <strong>0 到 7 的数字来表示数据</strong>。每一位数字代表一个权值，每位权值都是 <strong>8 的幂。八进制常以&quot;0&quot;开头</strong>，例如，八进制数 035 表示 3x8^1 + 5x8^0，即十进制的 29。</p><h3 id="⛺️-十进制-decimal" tabindex="-1">⛺️ 十进制（Decimal） <a class="header-anchor" href="#⛺️-十进制-decimal" aria-label="Permalink to &quot;⛺️ 十进制（Decimal）&quot;">​</a></h3><p><strong>十进制是日常生活中最常用的进制，使用 0 到 9 的数字表示数据</strong>。每一位数字代表一个权值，每位权值都是 <strong>10 的幂</strong>。例如，十进制数 678 表示 6x10^2 + 7x10^1 + 8x10^0，即本身就是 678。</p><h3 id="🌾-十六进制-hexadecimal" tabindex="-1">🌾 十六进制（Hexadecimal） <a class="header-anchor" href="#🌾-十六进制-hexadecimal" aria-label="Permalink to &quot;🌾 十六进制（Hexadecimal）&quot;">​</a></h3><p>十六进制使用<strong>0 到 9 的数字和 A 到 F 的字母（不区分大小写）表示数据</strong>，共 16 个字符。每一位数字或字母代表一个权值，每位权值都是 <strong>16 的幂。十六进制常以&quot;0x&quot;或者&quot;0X&quot;开头</strong>，例如，十六进制数 0x1A 表示 1x16^1 + 10x16^0，即十进制的 26。</p><blockquote><p>🌋 为什么计算机要使用不同进制呢？ 因为计算机内部的数据处理是基于二进制的，但是二进制表达不直观且冗长，而使用其他进制（如八进制和十六进制）可以更方便地表示二进制数据。例如，在计算机的底层，<strong>十六进制常用于表示内存地址，因为它可以简明地表达大量的二进制位。</strong></p></blockquote><h3 id="🌰-互相转换" tabindex="-1">🌰 互相转换 <a class="header-anchor" href="#🌰-互相转换" aria-label="Permalink to &quot;🌰 互相转换&quot;">​</a></h3><h4 id="按权展开的原理" tabindex="-1">按权展开的原理 <a class="header-anchor" href="#按权展开的原理" aria-label="Permalink to &quot;按权展开的原理&quot;">​</a></h4><p>在十进制中，习惯于使用 10 个不同的数字（0-9）来表示数值。每个数字的位置代表了它在数值中的权值，<strong>从右向左的权值递增，最右边的数字权值为 1，然后是 10，100，1000，以此类推。</strong></p><p>例如，对于十进制数 1234，我们可以将它按权展开如下： <code>1x10^3 + 2x10^2 + 3x10^1 + 4x10^0 = 1000 + 200 + 30 + 4 = 1234</code></p><p>在二进制、八进制和十六进制中，也是类似的按权展开的原理，只是<strong>进制不同，所用的权值也会相应变化。</strong></p><p>二进制的权值是 2 的幂：1, 2, 4, 8, 16, 32, ... 八进制的权值是 8 的幂：1, 8, 64, 512, ... 十六进制的权值是 16 的幂：1, 16, 256, 4096, ... 例如，在二进制中，数值 1011 按权展开为： <code>1x2^3 + 0x2^2 + 1x2^1 + 1x2^0 = 8 + 0 + 2 + 1 = 11</code>（十进制）</p><p>在八进制中，数值 753 按权展开为： <code>7x8^2 + 5x8^1 + 3x8^0 = 7x64 + 5x8 + 3x1 = 483</code>（十进制）</p><p>在十六进制中，数值 3A 按权展开为： <code>3x16^1 + 10x16^0 = 3x16 + 10x1 = 58</code>（十进制）</p><p>按权展开是进制转换的一种基本方法，当了解不同进制的权值规律后，可以很方便地将不同进制的数值转换为十进制，或者将十进制数值转换为其他进制。</p><p><strong>1. 二进制与其他进制的转换：</strong></p><ul><li>二进制转十进制：将二进制数按权展开，并计算每一位的值，然后相加得到十进制数。例如，二进制数 1010 转换为十进制为：<code>1x2^3 + 0x2^2 + 1x2^1 + 0x2^0 = 8 + 0 + 2 + 0 = 10</code>。</li><li>二进制转八进制：将二进制数<strong>从右往左每三位分组</strong>，然后将每组转换为对应的八进制数。例如，二进制数 110110 转换为八进制为：<code>(011) (011) (0) = 33</code>(八进制)。</li><li>二进制转十六进制：将二进制数<strong>从右往左每四位分组</strong>，然后将每组转换为对应的十六进制数。例如，二进制数 110110 转换为十六进制为：(0110) (1100) = 0x6C(十六进制)。</li></ul><p><strong>2. 八进制与其他进制的转换：</strong></p><ul><li>八进制转十进制：将八进制数按权展开，并计算每一位的值，然后相加得到十进制数。例如，八进制数 35 转换为十进制为：<code>3x8^1 + 5x8^0 = 24 + 5 = 29</code>。</li><li>八进制转二进制：将八进制数的每一位转换为对应的三位二进制数。例如，八进制数 35 转换为二进制为：<code>(011) (101)</code>。</li><li>八进制转十六进制：先将八进制数转换为二进制，然后再将二进制转换为十六进制。例如，八进制数 35 转换为十六进制为：<code>(011) (101) = 0x1D</code>(十六进制)。</li></ul><p><strong>3. 十进制与其他进制的转换：</strong></p><ul><li>十进制转二进制：通过<strong>不断除以 2 并记录余数的方式</strong>，得到二进制数的各个位。例如，十进制数 10 转换为二进制为：1010。</li><li>十进制转八进制：通过<strong>不断除以 8 并记录余数的方式</strong>，得到八进制数的各个位。例如，十进制数 29 转换为八进制为：35。</li><li>十进制转十六进制：通过<strong>不断除以 16 并记录余数的方式</strong>，得到十六进制数的各个位。例如，十进制数 26 转换为十六进制为：1A。</li></ul><p><strong>4. 十六进制与其他进制的转换：</strong></p><ul><li>十六进制转二进制：将十六进制数的每一位转换为对应的四位二进制数。例如，十六进制数 0x1A 转换为二进制为：<code>(0001) (1010)</code>。</li><li>十六进制转八进制：先将十六进制数转换为二进制，然后再将二进制转换为八进制。例如，十六进制数 0x1A 转换为八进制为：<code>(0001) (1010) = 0x32</code>(八进制)。</li><li>十六进制转十进制：将十六进制数按权展开，并计算每一位的值，然后相加得到十进制数。例如，十六进制数 0x1A 转换为十进制为：<code>1x16^1 + 10x16^0 = 16 + 10 = 26</code>。</li></ul><p>在实际应用中，计算机编程语言通常提供内置函数或方法来进行进制转换，方便进行操作。</p><blockquote><p>前端领域涉及的知识</p></blockquote><ol><li><p>JavaScript 提供了一些内置的函数和方法来进行进制转换，例如：</p><ul><li>parseInt() 和 parseFloat()：用于将字符串转换为整数和浮点数。<strong>可以通过指定第二个参数，来将其他进制的字符串转换为十进制。</strong></li><li>toString()：用于将数字转换为字符串，并可以指定基数参数来表示不同进制的字符串。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1010</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 二进制数值</span></span>
<span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(num</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 十进制数值</span></span>
<span class="line"><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// &quot;1010&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x1a</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 十六进制数值</span></span>
<span class="line"><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// &quot;32&quot;</span></span></code></pre></div></li><li><p>数据存储与传输：在前端开发中，将数据以不同进制进行存储或传输的情况。例如，在处理二进制图像或音频数据时，会用到二进制数据的转换。同时，在进行数据传输时，可能需要将数据转换为特定的进制进行传输。</p></li><li><p><strong>URL 编码和解码：当处理 URL 时，有时候会涉及到将数据转换为十六进制或其他进制来进行 URL 编码，以便在 URL 中传递特殊字符或二进制数据。JavaScript 中的 encodeURIComponent() 和 decodeURIComponent()函数可以用于 URL 编码和解码</strong>。</p></li><li><p>Canvas 绘图：在使用 HTML5 Canvas 进行图形绘制时，可能会处理像素数据。<strong>这些像素数据通常以二进制或十六进制的形式表示</strong>，例如将图像数据以二进制或十六进制表示，然后将其绘制在 Canvas 上。</p></li><li><p>LocalStorage 和 Cookie：在前端中，常常需要将数据存储在本地（LocalStorage）或通过 Cookie 来保存。在这些情况下，可能需要进行数据的进制转换，以便正确地存储和读取数据。</p></li><li><p>处理 WebSocket 数据时可能需要将数据转换为二进制格式。</p></li></ol>`,31),e=[t];function p(r,c,i,d,C,x){return o(),s("div",null,e)}const g=a(l,[["render",p]]);export{A as __pageData,g as default};
